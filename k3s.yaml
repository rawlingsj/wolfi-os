package:
  name: k3s
  version: 1.30.3.1
  epoch: 3
  description:
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - busybox
      - conntrack-tools
      - containerd-shim-runc-v2
      - ip6tables # this pulls in iptables as well
      - kmod
      - libseccomp
      - mount
      - runc
      - umount
      # Do not include runtime dependencies already included in the multicall k3s
      # - ctr
      # - crictl
      # - containerd
      # - kubectl

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - crane
      - curl
      - go
      - libseccomp-dev
      - libseccomp-static
      - sqlite-dev
      - yq
      - zlib-dev
      - zlib-static
      - zstd

var-transforms:
  # Transform melange version 1.30.2.2 => 1.30.2+k3s2
  - from: ${{package.version}}
    match: \.(\d+)$
    replace: +k3s$1
    to: full-package-version

# Upstream uses `dapper` to initialize build environments, but since melange
# already provides a consistent build environment, we adopt upstreams ./scripts
# as much as possible.
pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/k3s-io/k3s
      tag: v${{vars.full-package-version}}
      expected-commit: f646604010affc6a1d3233a8a0870bca46bf80cf
  # Build things (almost) identical to upstream, with the k3s components
  # embedded in the "outer" multicall binary.
  - runs: |
      # Don't include the k3s-root since it conflicts with wolfi variants (ie: busybox and ip6tables)
      sed -e '/curl --compressed/d' -i scripts/download
      mkdir -p build/static bin/aux etc
      ./scripts/download

      # CVE-2023-47108
      go mod edit -dropreplace=go.opentelemetry.io/otel/exporters/otlp/otlpmetric
      go mod edit -dropreplace=go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc
      go mod edit -dropreplace=go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp
      go mod edit -dropreplace=go.opentelemetry.io/contrib/instrumentation/github.com/emicklei/go-restful/otelrestful
      go mod edit -dropreplace=go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc
      go mod edit -dropreplace=go.opentelemetry.io/otel
      go mod edit -dropreplace=go.opentelemetry.io/otel/sdk
      go mod edit -dropreplace=go.opentelemetry.io/otel/trace
      go mod edit -dropreplace=go.opentelemetry.io/proto/otlp
      go mod edit -dropreplace=go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc
      go mod edit -dropreplace=go.opentelemetry.io/otel/exporters/otlp/otlptrace
      go mod edit -dropreplace=go.opentelemetry.io/otel/metric
      go mod edit -dropreplace=go.opentelemetry.io/otel/exporters/otlp/internal/retry

      go get go.opentelemetry.io/contrib/instrumentation/github.com/emicklei/go-restful/otelrestful@v0.46.1
      go get go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc@v0.46.1
      go get go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp@v0.46.1
      go get go.opentelemetry.io/otel@v1.21.0
      go get go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc@v0.44.0
      go get go.opentelemetry.io/otel/exporters/otlp/otlptrace@v1.21.0
      go get go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc@v1.21.0
      go get go.opentelemetry.io/otel/metric@v1.21.0
      go get go.opentelemetry.io/otel/sdk@v1.21.0
      go get go.opentelemetry.io/otel/trace@v1.21.0
      go get go.opentelemetry.io/proto/otlp@v1.0.0

      go mod tidy
  - uses: go/bump
    with:
      deps: github.com/docker/docker@v25.0.6+incompatible github.com/go-jose/go-jose/v3@v3.0.3
      replaces: golang.org/x/net=golang.org/x/net@v0.25.0
  - runs: |
      # Override the go version check at runtime to always match the go version at build time
      # Ref: https://github.com/k3s-io/k3s/pull/9054
      GOVERSION=$(go env GOVERSION)
      sed -i "s/\${VERSION_GOLANG}/$GOVERSION/g" scripts/build

      ./scripts/build
  # k3s embedds a lot of useful components (containerd, kubectl, etc...) in a
  # very efficient manner that can't be replicated with external runtime
  # components. To ensure we have an optimally packaged k3s, we try to mimic
  # as much of the upstream k3s space savings while still building all the
  # components from source. We use some light sed surgery instead of
  # maintaining patches for every version. Ultimately this means Wolfi's
  # version of k3s should feel identical to upstream (with containerd,
  # kubectl, crictl, etc...) all embedded, but with Wolfi variants where
  # applicable (runc).
  - runs: |
      # Remove non-embedded components and replace with Wolfi variants at runtime
      rm -rf bin/runc
      rm -rf bin/containerd-shim-runc-v2

      for cni in bandwidth bridge firewall flannel host-local loopback portmap; do
        ln -s cni bin/$cni
      done

      mkdir -p "${{targets.destdir}}/bin"
      cp -r bin/* "${{targets.destdir}}/bin/"
  - uses: strip

subpackages:
  - name: k3s-multicall
    description: "The k3s multicall binary with embedded components"
    dependencies:
      runtime:
        - busybox
        - conntrack-tools
        - containerd-shim-runc-v2
        - ip6tables
        - libseccomp
        - runc
        - mount
        - umount
        - kmod
    pipeline:
      - runs: |
          # Remove the upload portion from the upstream package-cli script
          sed -e '/scripts\/build-upload/d' -i scripts/package-cli

          ./scripts/package-cli

          # Install the "outer" k3s multicall binary. This should only
          # contain the go runtime plus the self extracting multicall logic, and
          # should be a relatively small binary (~<15Mb).
          install -Dm755 dist/artifacts/k3s* "${{targets.contextdir}}/bin/k3s"

          # Create our own links to the multicall binary, which won't be present until k3s is unpacked
          for bin in kubectl ctr crictl containerd; do
            ln -s k3s "${{targets.contextdir}}/bin/$bin"
          done
      - uses: strip
    test:
      pipeline:
        - runs: |
            # Verify that the multicall symlinks were created
            [ "$(readlink $(which kubectl))" = "k3s" ] || { echo "Error: the multicall symlinks are not set up appropriately" >&2; exit 1; }
            [ "$(readlink $(which ctr))" = "k3s" ] || { echo "Error: the multicall symlinks are not set up appropriately" >&2; exit 1; }
            [ "$(readlink $(which crictl))" = "k3s" ] || { echo "Error: the multicall symlinks are not set up appropriately" >&2; exit 1; }
            [ "$(readlink $(which containerd))" = "k3s" ] || { echo "Error: the multicall symlinks are not set up appropriately" >&2; exit 1; }

  - name: k3s-static
    description: "k3s built with statically linked components"
    dependencies:
      runtime:
        - busybox
        - conntrack-tools
        - ip6tables
        - mount
        - umount
        - kmod
    pipeline:
      - uses: go/bump
        with:
          modroot: build/src/github.com/opencontainers/runc
          deps: google.golang.org/protobuf@v1.33.0 golang.org/x/net@v0.23.0
      - runs: |
          # Clean up the build directory
          rm -rf bin etc

          STATIC_BUILD=true ./scripts/build

          for cni in bandwidth bridge firewall flannel host-local loopback portmap; do ln -s cni bin/$cni; done

          mkdir -p "${{targets.subpkgdir}}/bin"
          cp -r bin/* "${{targets.subpkgdir}}/bin/"
      - uses: strip
    test:
      environment:
        contents:
          packages:
            - binutils
      pipeline:
        - runs: |
            # Verify libseccomp is statically linked against k3s
            objdump -x $(which k3s) | grep -v "DYNAMIC"
            strings $(which k3s) | grep -q "libseccomp"

            # Verify runc is statically linked
            objdump -x $(which runc) | grep -v "DYNAMIC"

            # Verify containerd is statically linked
            objdump -x $(which containerd) | grep -v "DYNAMIC"

  - name: k3s-images
    description: "pre-packaged k3s core runtime images"
    pipeline:
      - runs: |
          set -e -u -x

          _arch=$(go env GOARCH)

          images=""
          while read -r line
          do
            repo=$(echo $line | cut -d ':' -f 1)
            tag=$(echo $line | cut -d ':' -f 2)

            # Replace upstream images with cgr.dev equivalents only if they exist
            case $repo in
              docker.io/rancher/klipper-helm|docker.io/rancher/klipper-lb|docker.io/rancher/local-path-provisioner|docker.io/rancher/mirrored-pause)
                # TODO: Replace these known gaps with cgr variants
                image="$repo:$tag@$(crane digest $repo:$tag)"
                ;;
              docker.io/rancher/mirrored-metrics-server)
                image=$(crane digest --full-ref cgr.dev/chainguard/metrics-server:latest)
                ;;
              docker.io/rancher/mirrored-coredns-coredns)
                image=$(crane digest --full-ref cgr.dev/chainguard/coredns:latest)
                ;;
              docker.io/rancher/mirrored-library-busybox)
                image=$(crane digest --full-ref cgr.dev/chainguard/busybox:latest)
                ;;
              docker.io/rancher/mirrored-library-traefik)
                image=$(crane digest --full-ref cgr.dev/chainguard/traefik:latest)
                ;;
              *)
                echo "unaccounted for image: $repo:$tag"
                exit 1
                ;;
            esac

            images="$images $image"
          done < ./scripts/airgap/image-list.txt

          echo "Pulling images locally..."
          echo $images

          _images_path="${{targets.subpkgdir}}"/var/lib/rancher/k3s/agent/images
          mkdir -p $_images_path

          crane pull $images $_images_path/k3s-airgap-images-$_arch.tar

update:
  enabled: true
  version-transform:
    - match: \.(\d+)$
      replace: +k3s$1
  github:
    identifier: k3s-io/k3s
    strip-prefix: v

test:
  pipeline:
    - name: Basic version smoketest
      runs: |
        k3s --version
    - name: Ensure the various tools are appropriately symlinked
      runs: |
        # Ensure the various tools are appropriately symlinked
        [ "$(readlink $(which kubectl))" = "k3s" ] || { echo "Error: the multicall symlinks are not set up appropriately" >&2; exit 1; }
        [ "$(readlink $(which ctr))" = "k3s" ] || { echo "Error: the multicall symlinks are not set up appropriately" >&2; exit 1; }
        [ "$(readlink $(which crictl))" = "k3s" ] || { echo "Error: the multicall symlinks are not set up appropriately" >&2; exit 1; }
        [ "$(readlink $(which containerd))" = "k3s" ] || { echo "Error: the multicall symlinks are not set up appropriately" >&2; exit 1; }
