"""
This is the test_getaddresses_nasty function with the triggering
test case that was added for this fix.  We test that
setting PYTHON_EMAIL_STRICT_PARSING_DEFAULT to false gives
the old behavior and to true gives new behavior
"""

import unittest

from unittest.mock import patch

from email import utils

expected_strict = [('', '')]
expected_nonstrict = [('', ''), ('', ''), ('', '*--')]

@patch('os.environ', {"PYTHON_EMAIL_STRICT_PARSING_DEFAULT": "false"})
@patch('email.utils._parseaddr_strict_default', None)
class TestNonstrictParsing(unittest.TestCase):
    def test_getaddresses_nasty(self):
        self.assertEqual(utils.getaddresses(
           ['[]*-- =~$']), expected_nonstrict)

@patch('os.environ', {"PYTHON_EMAIL_STRICT_PARSING_DEFAULT": "true"})
@patch('email.utils._parseaddr_strict_default', None)
class TestStrictParsing(unittest.TestCase):
    def test_getaddresses_nasty(self):
        self.assertEqual(utils.getaddresses(
           ['[]*-- =~$']), expected_strict)

"""This test would fail if env had PYTHON_EMAIL_STRICT_PARSING_DEFAULT=false"""
class TestStrictNoEnvParsing(unittest.TestCase):
    def test_getaddresses_nasty(self):
        self.assertEqual(utils.getaddresses(
           ['[]*-- =~$']), expected_strict)

if __name__ == '__main__':
    unittest.main()
